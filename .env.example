# Environment Configuration for Different Deployment Phases

## Phase 1: Development (Current)
```bash
npm start
# Uses dummy data, no API keys needed
```

## Phase 2: Backend Integration with Google Gemini
```bash
# .env.local
GEMINI_API_KEY=your-google-gemini-key  # Get from Google AI Studio
API_BASE_URL=http://localhost:3000/api
```

## Phase 3: Production
```bash
# .env.production
GEMINI_API_KEY=${VAULT_SECRET:GEMINI_API_KEY}  # From secure vault
API_BASE_URL=https://api.yourhospital.com
# Never commit production keys to git!
```

## Setting Environment Variables

### Windows (PowerShell)
```powershell
# Temporary (current session only)
$env:GEMINI_API_KEY="your-api-key"

# Permanent (System/User properties)
[System.Environment]::SetEnvironmentVariable('GEMINI_API_KEY', 'your-api-key', 'User')
```

### Windows (CMD)
```cmd
set GEMINI_API_KEY=your-api-key
```

### Linux/Mac
```bash
export GEMINI_API_KEY="your-api-key"
# For permanent: add to ~/.bashrc or ~/.zshrc
```

### .env.local (Angular 20 projects)
Create file `src/.env.local`:
```
GEMINI_API_KEY=your-google-gemini-key
API_BASE_URL=http://localhost:3000/api
```

Then access via:
```typescript
const apiKey = process.env['GEMINI_API_KEY'];
```

---

## .gitignore for API Keys
```gitignore
# Environment variables (NEVER commit these)
.env
.env.local
.env.production

# API key files
*.key
*.pem
secrets.json
```

---

## Getting Gemini API Key (Phase 2+)

### Google Gemini
1. Visit: https://aistudio.google.com/
2. Click "Get API key" or go to https://makersuite.google.com/app/apikey
3. Create new API key
4. Copy and store securely
5. Add to environment: `GEMINI_API_KEY=your-key`

### Your Backend (JWT Token)
1. Call login endpoint: POST `/api/auth/login`
2. Receive JWT token in response
3. ApiService stores in localStorage automatically

### AWS/Azure
- Follow provider documentation
- Use managed identity when possible (safer than keys)
- Rotate keys regularly

---

## Where Each Key is Used in Code

```typescript
// Config
src/app/config/environment.ts
  ├── environment.auth.geminiKey
  ├── environment.auth.geminiModel  // 'gemini-1.5-pro' or 'gemini-1.5-flash'
  └── environment.auth.tokenKey

// Services
src/app/services/api.service.ts
  ├── getHeaders() - adds JWT token to all requests
  ├── askAiAssistant() - uses Gemini API key
  └── getProcedures() - uses JWT token

// State
src/app/state/hospital-state.store.ts
  ├── queryAiAssistant() - calls Gemini API
  ├── login() - receives and stores JWT token
  └── logout() - clears stored token
```

---

## Security Checklist

- [ ] Never hardcode API keys in source code
- [ ] Use environment variables for all secrets
- [ ] Add sensitive files to .gitignore
- [ ] Rotate keys periodically
- [ ] Use HTTPS for all API calls
- [ ] Implement token refresh logic (Phase 2+)
- [ ] Log API errors but not sensitive data
- [ ] Use separate keys for dev/staging/prod
